@model ArticleModel

@{
    ViewBag.Title = "Edit";
    Layout = "~/Views/Shared/_PageLayout.cshtml";
}

<h2>Edit</h2>

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
    
    <div class="form-horizontal">
        <h4>Article</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @Html.HiddenFor(model => model.Id)
        <div class="form-group">
            @Html.LabelFor(model => model.Title, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Title, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Title, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.ShortBrief, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.ShortBrief, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.ShortBrief, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.MainContent, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.TextAreaFor(model => model.MainContent, new { @class = "text-editor" })
                @Html.ValidationMessageFor(model => model.MainContent, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <label class="control-label col-md-2">Supper Category:</label>
            <div class="col-md-10">
                @Html.DropDownList("SuperCategories", null, "All Categories", new { @class = "form-control", id = "superCats" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.CategoryId, "CategoryId", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownList("CategoryId", null, htmlAttributes: new { @class = "form-control", id = "subCats" })
                @Html.ValidationMessageFor(model => model.CategoryId, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            <label class="col-md-2 control-label">Keywords:</label>
            <div class="col-md-10">
                <input id="Keywords" type="text" class="form-control" />
            </div>
        </div>
        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Save" class="btn btn-default" />
            </div>
        </div>
    </div>
}

@section scripts
{
    <script>
        $(document).ready(function () {
            $(".text-editor").editable({
                inlineMode: false,
                borderColor: "transparent",
                imageUploadURL: '/Handler/FroalaHandler.ashx',
            });
        });

        $("#superCats").change(function (e) {
            
            var superCatId = e.target.value;
            $.getJSON("/Category/GetSubCatsBySuperCatId", { superCatId: superCatId },
                function (data) {
                    var select = $("#subCats");
                    select.empty();
                    $.each(data, function (index, itemData) {
                        select.append($('<option/>', {
                            value: itemData.Id,
                            text: itemData.Name
                        }));
                    });
                }
            );
        });

        var keywords = new Bloodhound({
            datumTokenizer: Bloodhound.tokenizers.obj.whitespace('name'),
            queryTokenizer: Bloodhound.tokenizers.whitespace,
            prefetch: {
                url: '/Keyword/JsonList',
                filter: function (list) {
                    return $.map(list, function (kw) {
                        return { name: kw };
                    });
                }
            }
        });
        keywords.initialize();

        $('#Keywords').tagsinput({
            typeaheadjs: {
                name: 'keywords',
                displayKey: 'name',
                valueKey: 'name',
                source: keywords.ttAdapter()
            }
        });

    </script>

}